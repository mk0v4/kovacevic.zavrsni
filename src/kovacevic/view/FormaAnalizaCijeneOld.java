/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kovacevic.view;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import kovacevic.controller.HibernateObrada;
import kovacevic.model.AnalizaCijene;
import kovacevic.model.AnalizaMaterijal;
import kovacevic.model.AnalizaRad;
import kovacevic.model.StavkaTroskovnik;
import kovacevic.pomocno.HibernateUtil;

/**
 *
 * @author Marko Kovačević
 */
public class FormaAnalizaCijeneOld extends Forma<AnalizaCijene> {

    private List<AnalizaCijene> analizaCijena;
    private List<AnalizaMaterijal> analizaMaterijal;
    private List<AnalizaRad> analizaRad;
    private List<StavkaTroskovnik> stavkaTroskovnik;

    /**
     * Creates new form FormaAnalizaCijene
     */
    public FormaAnalizaCijeneOld() {
        initComponents();
        setTitle("Analiza Cijena");
        obrada = new HibernateObrada();

        ucitaj();
        ucitajAnalizaRad();
        ucitajAnalizaMaterijal();
        ucitajStavkaTroskovnik();
    }

    @Override
    protected void ucitaj() {
        DefaultListModel<AnalizaCijene> m = new DefaultListModel<>();
        lstAnalizaCijena.setModel(m);
        analizaCijena = HibernateUtil.getSession().createQuery("from AnalizaCijene a where a.obrisan=false").list();
        analizaCijena.forEach((s) -> {
            m.addElement(s);
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtGrupaNorme = new javax.swing.JTextField();
        lblGrupaNorme = new javax.swing.JLabel();
        lblOznakaNorme = new javax.swing.JLabel();
        txtOznakaNorme = new javax.swing.JTextField();
        lblOpisNorme = new javax.swing.JLabel();
        lblJedinicaMjere = new javax.swing.JLabel();
        txtJedinicaMjere = new javax.swing.JTextField();
        lblUkupnoVrijeme = new javax.swing.JLabel();
        txtUkupanNormativVremena = new javax.swing.JTextField();
        lblUkupnoMaterijal = new javax.swing.JLabel();
        txtUkupnoMaterijal = new javax.swing.JTextField();
        lblUkupnoRad = new javax.swing.JLabel();
        txtUkupnoRad = new javax.swing.JTextField();
        lblKoeficijentFirme = new javax.swing.JLabel();
        txtKoeficijentFirme = new javax.swing.JTextField();
        lblUkupnaCijena = new javax.swing.JLabel();
        txtUkupnaCijena = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tarOpisNorme = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstAnalizaCijena = new javax.swing.JList<>();
        btnDodaj = new javax.swing.JButton();
        btnPromjeni = new javax.swing.JButton();
        btnObrisi = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblOperacije = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstMaterijali = new javax.swing.JList<>();
        lblMaterijali = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstOperacije = new javax.swing.JList<>();
        lblStavkaTroskovnik = new javax.swing.JLabel();
        cmbStavkaTroskovnik = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(850, 0));

        lblGrupaNorme.setText("Grupa norme:");

        lblOznakaNorme.setText("Oznaka norme:");

        lblOpisNorme.setText("Opis norme:");

        lblJedinicaMjere.setText("Jedinica mjere:");

        lblUkupnoVrijeme.setText("Ukupan normativ vremena:");

        lblUkupnoMaterijal.setText("Ukupna cijena materijala:");

        lblUkupnoRad.setText("Ukupna cijena rada:");

        lblKoeficijentFirme.setText("Koeficijent:");

        lblUkupnaCijena.setText("Ukupna cijena:");

        jScrollPane2.setToolTipText("");

        tarOpisNorme.setColumns(20);
        tarOpisNorme.setRows(5);
        tarOpisNorme.setWrapStyleWord(true);
        tarOpisNorme.setPreferredSize(new java.awt.Dimension(104, 79));
        jScrollPane2.setViewportView(tarOpisNorme);
        tarOpisNorme.setLineWrap(true);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(400, 23));
        jScrollPane1.setName(""); // NOI18N
        jScrollPane1.setPreferredSize(new java.awt.Dimension(650, 130));

        lstAnalizaCijena.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstAnalizaCijena.setToolTipText("");
        lstAnalizaCijena.setDropMode(javax.swing.DropMode.INSERT);
        lstAnalizaCijena.setMaximumSize(new java.awt.Dimension(1000, 1000));
        lstAnalizaCijena.setMinimumSize(new java.awt.Dimension(400, 0));
        lstAnalizaCijena.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstAnalizaCijenaValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstAnalizaCijena);

        btnDodaj.setText("Dodaj");
        btnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajActionPerformed(evt);
            }
        });

        btnPromjeni.setText("Promjeni");
        btnPromjeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPromjeniActionPerformed(evt);
            }
        });

        btnObrisi.setText("Obriši");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        jLabel1.setText("zbroj vremena iz AnalizaRad");

        jLabel2.setText("zbroj cijene iz AnalizaRad");

        jLabel3.setText("zbroj cijene iz AnalizaMaterijal");

        jLabel4.setText("ukupan rad*koeficijent + ukupan materijal");

        lblOperacije.setText("Operacije:");

        jScrollPane3.setMinimumSize(new java.awt.Dimension(450, 23));
        jScrollPane3.setName(""); // NOI18N
        jScrollPane3.setPreferredSize(new java.awt.Dimension(450, 130));

        lstMaterijali.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstMaterijali.setToolTipText("");
        lstMaterijali.setDropMode(javax.swing.DropMode.INSERT);
        lstMaterijali.setMaximumSize(new java.awt.Dimension(1000, 1000));
        jScrollPane3.setViewportView(lstMaterijali);

        lblMaterijali.setText("Materijali:");

        jScrollPane4.setMinimumSize(new java.awt.Dimension(450, 23));
        jScrollPane4.setName(""); // NOI18N
        jScrollPane4.setPreferredSize(new java.awt.Dimension(450, 130));

        lstOperacije.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstOperacije.setToolTipText("");
        lstOperacije.setDropMode(javax.swing.DropMode.INSERT);
        lstOperacije.setMaximumSize(new java.awt.Dimension(1000, 1000));
        jScrollPane4.setViewportView(lstOperacije);

        lblStavkaTroskovnik.setText("Stavka troškovnika:");

        cmbStavkaTroskovnik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStavkaTroskovnikActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblGrupaNorme)
                    .addComponent(lblOznakaNorme)
                    .addComponent(lblOpisNorme)
                    .addComponent(lblJedinicaMjere)
                    .addComponent(lblOperacije)
                    .addComponent(lblUkupnoVrijeme)
                    .addComponent(lblUkupnoRad)
                    .addComponent(lblKoeficijentFirme)
                    .addComponent(lblMaterijali)
                    .addComponent(lblUkupnoMaterijal)
                    .addComponent(lblUkupnaCijena)
                    .addComponent(lblStavkaTroskovnik))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtUkupnaCijena)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDodaj)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPromjeni)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnObrisi))
                    .addComponent(txtUkupnoMaterijal)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(txtKoeficijentFirme)
                    .addComponent(txtUkupnoRad)
                    .addComponent(txtUkupanNormativVremena)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(txtJedinicaMjere)
                    .addComponent(jScrollPane2)
                    .addComponent(txtOznakaNorme)
                    .addComponent(txtGrupaNorme)
                    .addComponent(cmbStavkaTroskovnik, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbStavkaTroskovnik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStavkaTroskovnik))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtGrupaNorme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblGrupaNorme))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtOznakaNorme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblOznakaNorme))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblOpisNorme)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtJedinicaMjere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblJedinicaMjere))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblOperacije)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUkupanNormativVremena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUkupnoVrijeme)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUkupnoRad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUkupnoRad)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtKoeficijentFirme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblKoeficijentFirme))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMaterijali)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUkupnoMaterijal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUkupnoMaterijal)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUkupnaCijena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUkupnaCijena)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDodaj)
                            .addComponent(btnPromjeni)
                            .addComponent(btnObrisi))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lstAnalizaCijenaValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstAnalizaCijenaValueChanged

        if (evt.getValueIsAdjusting()) {
            return;
        }

        try {
            this.entitet = lstAnalizaCijena.getSelectedValue();
//            txtGrupaNorme.setText(lstAnalizaCijena.getSelectedValue().getGrupaNorme());
            txtOznakaNorme.setText(lstAnalizaCijena.getSelectedValue().getOznakaNorme());
            tarOpisNorme.setText(lstAnalizaCijena.getSelectedValue().getOpis());
            txtJedinicaMjere.setText(lstAnalizaCijena.getSelectedValue().getJedinicaMjere());
            txtUkupanNormativVremena.setText(lstAnalizaCijena.getSelectedValue().getUkupanNormativVremena().toString());
            txtUkupnoRad.setText(lstAnalizaCijena.getSelectedValue().getUkupnaCijenaRad().toString());
            txtKoeficijentFirme.setText(lstAnalizaCijena.getSelectedValue().getKoeficijentFirme().toString());
            txtUkupnoMaterijal.setText(lstAnalizaCijena.getSelectedValue().getUkupnaCijenaMaterijal().toString());
            txtUkupnaCijena.setText(lstAnalizaCijena.getSelectedValue().getSveukupanIznos().toString());
            cmbStavkaTroskovnik.setSelectedItem(entitet.getStavkaTroskovnik());
           
            DefaultListModel<AnalizaRad> m = new DefaultListModel<>();
            lstOperacije.setModel(m);
            entitet.getAnalizeRadova().forEach((s) -> {
                m.addElement(s);
            });
            ucitajAnalizaRad();

            DefaultListModel<AnalizaMaterijal> n = new DefaultListModel<>();
            lstMaterijali.setModel(n);
            entitet.getAnalize_materijala().forEach((s) -> {
                n.addElement(s);
            });
            ucitajAnalizaMaterijal();
        } catch (Exception e) {
        }
                repaint();
    }//GEN-LAST:event_lstAnalizaCijenaValueChanged

    private void btnDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajActionPerformed
        entitet = new AnalizaCijene();
        spremi();
        repaint();
    }//GEN-LAST:event_btnDodajActionPerformed

    private void btnPromjeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPromjeniActionPerformed
        if (lstAnalizaCijena.getSelectedValue() == null) {
            JOptionPane.showConfirmDialog(rootPane, "Prvo odaberite stavku");
        }
        spremi();
    }//GEN-LAST:event_btnPromjeniActionPerformed
    @Override
    protected void spremi() {
//        entitet.setGrupaNorme(txtGrupaNorme.getText());
        entitet.setOznakaNorme(txtOznakaNorme.getText());
        entitet.setOpis(tarOpisNorme.getText());
        entitet.setJedinicaMjere(txtJedinicaMjere.getText());
        entitet.setUkupanNormativVremena(new BigDecimal(txtUkupanNormativVremena.getText()));
        entitet.setUkupnaCijenaRad(new BigDecimal(txtUkupnoRad.getText()));
        entitet.setKoeficijentFirme(new BigDecimal(txtKoeficijentFirme.getText()));
        entitet.setUkupnaCijenaMaterijal(new BigDecimal(txtUkupnoMaterijal.getText()));
        entitet.setSveukupanIznos(new BigDecimal(txtUkupnaCijena.getText()));
        entitet.setStavkaTroskovnik((StavkaTroskovnik) cmbStavkaTroskovnik.getSelectedItem());
        super.spremi();
        repaint();
    }
    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed
        if (lstAnalizaCijena.getSelectedValue() == null) {
            JOptionPane.showConfirmDialog(rootPane, "Prvo odaberite stavku");
        }
        obrisi();
    }//GEN-LAST:event_btnObrisiActionPerformed

    private void cmbStavkaTroskovnikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStavkaTroskovnikActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbStavkaTroskovnikActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodaj;
    private javax.swing.JButton btnObrisi;
    private javax.swing.JButton btnPromjeni;
    private javax.swing.JComboBox<StavkaTroskovnik> cmbStavkaTroskovnik;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblGrupaNorme;
    private javax.swing.JLabel lblJedinicaMjere;
    private javax.swing.JLabel lblKoeficijentFirme;
    private javax.swing.JLabel lblMaterijali;
    private javax.swing.JLabel lblOperacije;
    private javax.swing.JLabel lblOpisNorme;
    private javax.swing.JLabel lblOznakaNorme;
    private javax.swing.JLabel lblStavkaTroskovnik;
    private javax.swing.JLabel lblUkupnaCijena;
    private javax.swing.JLabel lblUkupnoMaterijal;
    private javax.swing.JLabel lblUkupnoRad;
    private javax.swing.JLabel lblUkupnoVrijeme;
    private javax.swing.JList<AnalizaCijene> lstAnalizaCijena;
    private javax.swing.JList<AnalizaMaterijal> lstMaterijali;
    private javax.swing.JList<AnalizaRad> lstOperacije;
    private javax.swing.JTextArea tarOpisNorme;
    private javax.swing.JTextField txtGrupaNorme;
    private javax.swing.JTextField txtJedinicaMjere;
    private javax.swing.JTextField txtKoeficijentFirme;
    private javax.swing.JTextField txtOznakaNorme;
    private javax.swing.JTextField txtUkupanNormativVremena;
    private javax.swing.JTextField txtUkupnaCijena;
    private javax.swing.JTextField txtUkupnoMaterijal;
    private javax.swing.JTextField txtUkupnoRad;
    // End of variables declaration//GEN-END:variables

    private void ucitajAnalizaRad() {
        List<AnalizaRad> ar = new ArrayList<>();
        analizaRad = HibernateUtil.getSession().createQuery("from AnalizaRad a where a.obrisan=false").list();
        analizaRad.stream().forEach((p) -> {
            if (entitet != null) {
                boolean dodaj = true;
                for (AnalizaRad analizaR : entitet.getAnalizeRadova()) {
                    if (p.getId().equals(analizaR.getId())) {
                        dodaj = false;
                        break;
                    }
                }
                if (dodaj) {
                    ar.add(p);
                }
            }

        });

    }

    private void ucitajAnalizaMaterijal() {
        List<AnalizaMaterijal> am = new ArrayList<>();
        analizaMaterijal = HibernateUtil.getSession().createQuery("from AnalizaMaterijal a where a.obrisan=false").list();
        analizaMaterijal.stream().forEach((p) -> {
            if (entitet != null) {
                boolean dodaj = true;
                for (AnalizaMaterijal analizaM : entitet.getAnalize_materijala()) {
                    if (p.getId().equals(analizaM.getId())) {
                        dodaj = false;
                        break;
                    }
                }
                if (dodaj) {
                    am.add(p);
                }
            }

        });
        repaint();
    }

    private void ucitajStavkaTroskovnik() {
        DefaultComboBoxModel<StavkaTroskovnik> m = new DefaultComboBoxModel<>();
        cmbStavkaTroskovnik.setModel(m);
        List<StavkaTroskovnik> stavka = HibernateUtil.getSession().
                createQuery("from StavkaTroskovnik a where "
                        + "a.obrisan=false  ").list();

        for (StavkaTroskovnik p : stavka) {

            m.addElement(p);
            cmbStavkaTroskovnik.setSelectedItem(p);

        }

    }   
  
    
    
}
