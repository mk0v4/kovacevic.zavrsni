/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kovacevic.view;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import kovacevic.controller.Obrada;
import kovacevic.model.AnalizaCijene;
import kovacevic.model.StavkaTroskovnik;
import kovacevic.pomocno.HibernateUtil;

/**
 *
 * @author Marko Kovačević
 */
public class FormaStavkaTroskovnik extends Forma<StavkaTroskovnik>{

    private List<StavkaTroskovnik> stavkaTroskovnik;
    private List<AnalizaCijene> analizaCijene;

    /**
     * Creates new form FormaAnalizaCijene
     */
    public FormaStavkaTroskovnik() {
        initComponents();
        setTitle("Stavke Troškovnika");
        obrada = new Obrada();

        ucitaj();
        ucitajAnalizaCijene();
    }

    @Override
    protected void ucitaj() {
        DefaultListModel<StavkaTroskovnik> m = new DefaultListModel<>();
        lstStavkeTroskovnika.setModel(m);
        stavkaTroskovnik = HibernateUtil.getSession().createQuery("from StavkaTroskovnik a where a.obrisan=false").list();
        stavkaTroskovnik.forEach((s) -> {
            m.addElement(s);
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtOznakaStavke = new javax.swing.JTextField();
        lblNorme = new javax.swing.JLabel();
        lblOpisNorme = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tarOpisNorme = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstStavkeTroskovnika = new javax.swing.JList<>();
        btnDodaj = new javax.swing.JButton();
        btnPromjeni = new javax.swing.JButton();
        btnObrisi = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstAnalizeCijena = new javax.swing.JList<>();
        lblOznakaStavke = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tarDodatanOpis = new javax.swing.JTextArea();
        lblDodatanOpis = new javax.swing.JLabel();
        txtJedinicaMjere = new javax.swing.JTextField();
        lblJedinicaMjere = new javax.swing.JLabel();
        lblKolicina = new javax.swing.JLabel();
        txtKolicina = new javax.swing.JTextField();
        txtUkupnaCijena = new javax.swing.JTextField();
        lblUkupnaCijena = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(850, 0));

        lblNorme.setText("Norme:");

        lblOpisNorme.setText("Opis norme:");

        jScrollPane2.setToolTipText("");

        tarOpisNorme.setColumns(20);
        tarOpisNorme.setRows(5);
        tarOpisNorme.setWrapStyleWord(true);
        tarOpisNorme.setPreferredSize(new java.awt.Dimension(104, 79));
        jScrollPane2.setViewportView(tarOpisNorme);
        tarOpisNorme.setLineWrap(true);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(400, 23));
        jScrollPane1.setName(""); // NOI18N
        jScrollPane1.setPreferredSize(new java.awt.Dimension(650, 130));

        lstStavkeTroskovnika.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstStavkeTroskovnika.setToolTipText("");
        lstStavkeTroskovnika.setDropMode(javax.swing.DropMode.INSERT);
        lstStavkeTroskovnika.setMaximumSize(new java.awt.Dimension(1000, 1000));
        lstStavkeTroskovnika.setMinimumSize(new java.awt.Dimension(400, 0));
        lstStavkeTroskovnika.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstStavkeTroskovnikaValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstStavkeTroskovnika);

        btnDodaj.setText("Dodaj");
        btnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajActionPerformed(evt);
            }
        });

        btnPromjeni.setText("Promjeni");
        btnPromjeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPromjeniActionPerformed(evt);
            }
        });

        btnObrisi.setText("Obriši");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        jScrollPane4.setMinimumSize(new java.awt.Dimension(450, 23));
        jScrollPane4.setName(""); // NOI18N
        jScrollPane4.setPreferredSize(new java.awt.Dimension(450, 130));

        lstAnalizeCijena.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstAnalizeCijena.setToolTipText("");
        lstAnalizeCijena.setDropMode(javax.swing.DropMode.INSERT);
        lstAnalizeCijena.setMaximumSize(new java.awt.Dimension(1000, 1000));
        jScrollPane4.setViewportView(lstAnalizeCijena);

        lblOznakaStavke.setText("Oznaka stavke:");

        jScrollPane3.setToolTipText("");

        tarDodatanOpis.setColumns(20);
        tarDodatanOpis.setRows(5);
        tarDodatanOpis.setWrapStyleWord(true);
        tarDodatanOpis.setPreferredSize(new java.awt.Dimension(104, 79));
        jScrollPane3.setViewportView(tarDodatanOpis);
        tarOpisNorme.setLineWrap(true);

        lblDodatanOpis.setText("Dodatan opis:");

        lblJedinicaMjere.setText("Jedinica mjere:");

        lblKolicina.setText("Količina:");

        lblUkupnaCijena.setText("Ukupna cijena:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNorme)
                    .addComponent(lblOznakaStavke)
                    .addComponent(lblOpisNorme)
                    .addComponent(lblDodatanOpis)
                    .addComponent(lblJedinicaMjere)
                    .addComponent(lblKolicina)
                    .addComponent(lblUkupnaCijena))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDodaj)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPromjeni)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE)
                        .addComponent(btnObrisi))
                    .addComponent(txtOznakaStavke)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane3)
                    .addComponent(txtJedinicaMjere)
                    .addComponent(txtKolicina)
                    .addComponent(txtUkupnaCijena))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblOznakaStavke)
                            .addComponent(txtOznakaStavke, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNorme)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblOpisNorme))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDodatanOpis))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblJedinicaMjere)
                            .addComponent(txtJedinicaMjere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtKolicina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblKolicina))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUkupnaCijena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUkupnaCijena))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDodaj)
                            .addComponent(btnPromjeni)
                            .addComponent(btnObrisi))))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lstStavkeTroskovnikaValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstStavkeTroskovnikaValueChanged

        if (evt.getValueIsAdjusting()) {
            return;
        }

        try {
            this.entitet = lstStavkeTroskovnika.getSelectedValue();
            txtOznakaStavke.setText(lstStavkeTroskovnika.getSelectedValue().getOznakaStavka());
            tarOpisNorme.setText(entitet.getAnalizeCijena().toString());
            tarDodatanOpis.setText(lstStavkeTroskovnika.getSelectedValue().getDodatanOpis());
//            txtJedinicaMjere
            txtKolicina.setText(lstStavkeTroskovnika.getSelectedValue().getKolicinaTroskovnik().toString());
            txtUkupnaCijena.setText(lstStavkeTroskovnika.getSelectedValue().getUkupnaCijena().toString());
      

            DefaultListModel<AnalizaCijene> m = new DefaultListModel<>();
            lstAnalizeCijena.setModel(m);
            entitet.getAnalizeCijena().forEach((s) -> {
                m.addElement(s);
            });
            ucitajAnalizaCijene();

        } catch (Exception e) {
        }
                repaint();
    }//GEN-LAST:event_lstStavkeTroskovnikaValueChanged

    private void btnDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajActionPerformed
        entitet = new StavkaTroskovnik();
        spremi();
        repaint();
    }//GEN-LAST:event_btnDodajActionPerformed

    private void btnPromjeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPromjeniActionPerformed
        if (lstStavkeTroskovnika.getSelectedValue() == null) {
            JOptionPane.showConfirmDialog(rootPane, "Prvo odaberite stavku");
        }
        spremi();
    }//GEN-LAST:event_btnPromjeniActionPerformed
    @Override
    protected void spremi() {
        entitet.setOznakaStavka(txtOznakaStavke.getText());
        entitet.setDodatanOpis(tarDodatanOpis.getText());
        entitet.setKolicinaTroskovnik(new BigDecimal(txtKolicina.getText()));
        entitet.setUkupnaCijena(new BigDecimal(txtUkupnaCijena.getText()));
        
//        entitet.setOznaka_norme(txtOznakaNorme.getText());
//        entitet.setOpis(tarOpisNorme.getText());
//        entitet.setJedinica_mjere(txtJedinicaMjere.getText());
//        entitet.setUkupan_normativ_vremena(new BigDecimal(txtUkupanNormativVremena.getText()));
//        entitet.setUkupna_cijena_rad(new BigDecimal(txtUkupnoRad.getText()));
//        entitet.setKoeficijent_firme(new BigDecimal(txtKoeficijentFirme.getText()));
//        entitet.setUkupna_cijena_materijal(new BigDecimal(txtUkupnoMaterijal.getText()));
//        entitet.setSveukupan_iznos(new BigDecimal(txtUkupnaCijena.getText()));
        super.spremi();
        repaint();
    }
    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed
        if (lstStavkeTroskovnika.getSelectedValue() == null) {
            JOptionPane.showConfirmDialog(rootPane, "Prvo odaberite stavku");
        }
        obrisi();
    }//GEN-LAST:event_btnObrisiActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodaj;
    private javax.swing.JButton btnObrisi;
    private javax.swing.JButton btnPromjeni;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblDodatanOpis;
    private javax.swing.JLabel lblJedinicaMjere;
    private javax.swing.JLabel lblKolicina;
    private javax.swing.JLabel lblNorme;
    private javax.swing.JLabel lblOpisNorme;
    private javax.swing.JLabel lblOznakaStavke;
    private javax.swing.JLabel lblUkupnaCijena;
    private javax.swing.JList<AnalizaCijene> lstAnalizeCijena;
    private javax.swing.JList<StavkaTroskovnik> lstStavkeTroskovnika;
    private javax.swing.JTextArea tarDodatanOpis;
    private javax.swing.JTextArea tarOpisNorme;
    private javax.swing.JTextField txtJedinicaMjere;
    private javax.swing.JTextField txtKolicina;
    private javax.swing.JTextField txtOznakaStavke;
    private javax.swing.JTextField txtUkupnaCijena;
    // End of variables declaration//GEN-END:variables

    private void ucitajAnalizaCijene() {
        List<AnalizaCijene> ac = new ArrayList<>();
        analizaCijene = HibernateUtil.getSession().createQuery("from AnalizaCijene a where a.obrisan=false").list();
        analizaCijene.stream().forEach((p) -> {
            if (entitet != null) {
                boolean dodaj = true;
                for (AnalizaCijene analizaC : entitet.getAnalizeCijena()) {
                    if (p.getId().equals(analizaC.getId())) {
                        dodaj = false;
                        break;
                    }
                }
                if (dodaj) {
                    ac.add(p);
                }
            }

        });

    }

//    private void ucitajAnalizaMaterijal() {
//        List<AnalizaMaterijal> am = new ArrayList<>();
//        analizaMaterijal = HibernateUtil.getSession().createQuery("from AnalizaMaterijal a where a.obrisan=false").list();
//        analizaMaterijal.stream().forEach((p) -> {
//            if (entitet != null) {
//                boolean dodaj = true;
//                for (AnalizaMaterijal analizaM : entitet.getAnalize_materijala()) {
//                    if (p.getId().equals(analizaM.getId())) {
//                        dodaj = false;
//                        break;
//                    }
//                }
//                if (dodaj) {
//                    am.add(p);
//                }
//            }
//
//        });
//        repaint();
//    }

//    private void ucitajStavkaTroskovnik() {
//        DefaultComboBoxModel<StavkaTroskovnik> m = new DefaultComboBoxModel<>();
//        cmbStavkaTroskovnik.setModel(m);
//        List<StavkaTroskovnik> stavka = HibernateUtil.getSession().
//                createQuery("from StavkaTroskovnik a where "
//                        + "a.obrisan=false  ").list();
//
//        for (StavkaTroskovnik p : stavka) {
//
//            m.addElement(p);
//            cmbStavkaTroskovnik.setSelectedItem(p);
//
//        }
//
//    }   
    
}
